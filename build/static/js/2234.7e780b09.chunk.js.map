{"version":3,"file":"static/js/2234.7e780b09.chunk.js","mappings":"+QAAO,SAASA,EAAcC,GAC1B,OAAOC,QAAQC,IAAIC,OAAOC,KAAKJ,GAAQK,QAAO,CAACC,EAAKC,KAChD,MAAMC,EAAkBR,EAAOO,GAO/B,MAN+B,kBAApBC,EACPF,EAAIG,KAAK,CAACF,EAAMC,IAGhBF,EAAIG,KAAKD,IAAkBE,MAAMC,GAAU,CAACJ,EAAMI,MAE/CL,CAAG,GACX,KAAKI,MAAME,GAAkBA,EAAcP,QAAO,CAACL,EAAMa,KAAmB,IAAhBC,EAAKC,GAAMF,EAEtE,OADAb,EAAOc,GAAOC,EACPf,CAAM,GACd,CAAC,IACR,CCZO,SAASgB,EAAoBC,GAChC,OAAOC,UAAY,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACE,QAAjBL,EAAAF,EAAWQ,cAAM,IAAAN,GAAjBA,EAAmBO,MAAM,uEACzB,MAAM,iCAAEC,EAAgC,sBAAEC,SAAgC,oEAClEC,aAAa,YAAEC,EAAcC,EAA0Bd,EAAWQ,QAAO,WAAEO,EAAU,UAAEC,EAAYC,EAAwBjB,EAAWQ,QAAO,aAAEU,GAAkBC,EAA0BnB,EAAWQ,eAAqC,QAAlBL,EAACH,EAAWoB,cAAM,IAAAjB,EAAAA,EAC/O,IAAIQ,EAAsBzB,OAAOmC,OAAO,CAAC,EAA0B,QAAzBjB,EAAEJ,EAAWsB,oBAAY,IAAAlB,EAAAA,EAAI,CAAC,EAAG,CACvEmB,OAAuC,QAAjClB,EAAyB,QAAzBC,EAAEN,EAAWsB,oBAAY,IAAAhB,OAAA,EAAvBA,EAAyBiB,cAAM,IAAAlB,EAAAA,EAAiC,QAAjCE,EAAIP,EAAWwB,0BAAkB,IAAAjB,OAAA,EAA7BA,EAA+BgB,WACzEE,KAAK,IAAIf,EAAiC,CAC/CgB,cAAe1B,EAAW2B,cAC1BC,WAAY5B,EAAW6B,WACvBC,OAAQ9B,EAAWjB,aAAeD,EAAckB,EAAWjB,aAAUgD,KAEzE,MAAO,CACHF,WAAY7B,EAAW6B,WACvBG,YAAanB,EACboB,gBAAiBjB,EACjBkB,aAAchB,EACdiB,WAAYpB,EACf,CAET,CACA,SAASD,EAA0BN,GAC/B,MAAM,IAAI4B,EAAAA,GAAyB,0DAA2D,CAAE5B,UACpG,CACA,SAASW,EAA0BX,GAC/B,MAAM,IAAI4B,EAAAA,GAAyB,wDAAyD,CAAE5B,UAClG,CACA,SAASS,EAAwBT,GAC7B,MAAM,IAAI4B,EAAAA,GAAyB,uDAAwD,CAAE5B,UACjG,CC9BO,MAAMT,EAAuBsC,GAAYC,EAAqB,IAC9DD,ICFDE,EAAa,cACZ,MAAMC,EACTC,WAAAA,GAAiD,IAArCC,EAAMC,UAAAC,OAAA,QAAAb,IAAAY,UAAA,GAAAA,UAAA,GAAG,2BACjBE,KAAKH,OAASA,CAClB,CACAI,OAAAA,CAAQjD,GACJ,OAAOgD,KAAKE,gBAAgB,YAAaC,IACrC,MAAMC,EAAMD,EAAME,IAAIrD,GACtB,OAAO,IAAIb,SAASmE,IAChBF,EAAIG,QAAU,IAAMD,EAAQ,MAC5BF,EAAII,UAAY,IAAMF,EAAQF,EAAIK,OAASL,EAAIK,OAAOxD,MAAQ,KAAK,GACrE,IACHyD,OAAM,IAAM,MACnB,CACAC,UAAAA,CAAW3D,GACP,OAAOgD,KAAKE,gBAAgB,aAAcC,IACtC,MAAMC,EAAMD,EAAMS,OAAO5D,GACzB,OAAO,IAAIb,SAAQ,CAACmE,EAASO,KACzBT,EAAIG,QAAU,IAAMM,EAAOT,EAAIU,OAC/BV,EAAII,UAAY,IAAMF,GAAS,GACjC,GAEV,CACAS,OAAAA,CAAQC,EAAI/D,GACR,OAAO+C,KAAKE,gBAAgB,aAAcC,IACtC,MAAMC,EAAMD,EAAMc,IAAI,CAAED,KAAI/D,UAC5B,OAAO,IAAId,SAAQ,CAACmE,EAASO,KACzBT,EAAIG,QAAU,IAAMM,EAAOT,EAAIU,OAC/BV,EAAII,UAAY,IAAMF,GAAS,GACjC,GAEV,CACAY,KAAAA,GACI,MAAMC,EAAgBC,KAAKC,UAAUC,KAAKtB,KAAKH,OAAQ,GACvD,OAAO,IAAI1D,SAAQ,CAACmE,EAASO,KACzBM,EAAcX,UAAY,KACtBF,EAAQa,EAAcV,OAAO,EAEjCU,EAAcZ,QAAU,KACpBM,EAAOM,EAAcL,MAAM,EAE/BK,EAAcI,UAAY,KACtBV,EAAO,IAAIW,MAAM,uBAAuB,EAE5CL,EAAcM,gBAAkB,KAC5B,MAAMC,EAAKP,EAAcV,OACzBiB,EAAGnB,QAAU,KACTM,EAAO,IAAIW,MAAM,iCAAiC,EAEtDE,EAAGC,kBAAkBjC,EAAY,CAAEkC,QAAS,MAAO,CACtD,GAET,CACA1B,eAAAA,CAAgB2B,EAAMC,GAClB,OAAO9B,KAAKkB,QAAQtE,MAAM8E,IACtB,MAAMK,EAAKL,EAAGM,YAAYtC,EAAYmC,GAEtC,OADAE,EAAGE,WAAa,IAAMP,EAAGQ,QAClB,IAAI/F,SAAQ,CAACmE,EAASO,KACzBkB,EAAGxB,QAAU,IAAMM,EAAOkB,EAAGjB,OAC7BR,EAAQwB,EAAOC,EAAGI,YAAYzC,IAAa,IAC5CgB,OAAO0B,IAEN,MADAV,EAAGQ,QACGE,CAAG,GACX,GAEV,EC/DJ,MAAMC,EAAkB,ICFjB,MACHzC,WAAAA,GAAwB,IAAZO,EAAKL,UAAAC,OAAA,QAAAb,IAAAY,UAAA,GAAAA,UAAA,GAAG,CAAC,EACjBE,KAAKG,MAAQA,CACjB,CACAF,OAAAA,CAAQjD,GACJ,OAAIA,KAAOgD,KAAKG,MACLH,KAAKG,MAAMnD,GAEf,IACX,CACA2D,UAAAA,CAAW3D,UACAgD,KAAKG,MAAMnD,EACtB,CACA+D,OAAAA,CAAQ/D,EAAKC,GACT+C,KAAKG,MAAMnD,GAAOC,CACtB,GDZG,SAASqF,IACZ,MAAoB,kBAATlB,MAAqBA,KAAKC,UAC1B,IAAI1B,EAEO,kBAAX4C,QAAuBA,OAAOD,aAC9BC,OAAOD,aAEXD,CACX,CE6BA,SAASG,EAAiB7E,GACtB,MAAM,IAAI4B,EAAAA,GAAyB,wDAAyD,CAAE5B,UAClG,CCzCO,MAAM8E,EAA2BjD,GDGjC,SAAgCzC,GAA0N,IAAzN,UAAE2F,EAAS,MAAEC,EAAQL,IAAc,OAAE/D,EAAM,aAAEE,EAAY,cAAEK,EAAa,eAAE8D,EAAc,OAAE1G,EAAM,eAAE2G,GAAkB3G,GAAyC,IAA/BG,OAAOC,KAAKJ,GAAQ6D,YAA6Bb,EAAd,aAAuB,OAAEvB,EAAM,mBAAEgB,GAAqB5B,EACrP,OAANY,QAAM,IAANA,GAAAA,EAAQC,MAAM,uEACd,MAAMkF,EAAWD,EAAc,oCAAAE,OACWH,EAAc,KAAAG,OAAIF,QACtD3D,EACN,IAAI8D,EAAW5F,UAAY,IAAA6F,EACvB,MAAM,aAAEC,EAAY,sBAAEpF,SAAgC,mEAChDqF,EAAgB,OAAN5E,QAAM,IAANA,EAAAA,EACZ,IAAIT,EAAsBzB,OAAOmC,OAAO,CAAC,EAAe,OAAZC,QAAY,IAAZA,EAAAA,EAAgB,CAAC,EAAG,CAAEC,OAA4B,QAAtBuE,EAAc,OAAZxE,QAAY,IAAZA,OAAY,EAAZA,EAAcC,cAAM,IAAAuE,EAAAA,EAAsB,OAAlBtE,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBD,UAC1H,IAAIM,EAAc8D,SAAmBH,EAAM1C,QAAQ6C,GACnD,IAAK9D,EAAY,CACb,MAAM,WAAED,EAAayD,EAAiB7E,UAAkBwF,EAAQvE,KAAK,IAAIsE,EAAa,CAClFE,UAAWV,EACXW,eAAgBT,EAChB3D,OAAQ/C,QAAeD,EAAcC,QAAUgD,KAEnDF,EAAaD,EACT+D,GACA3G,QAAQmE,QAAQqC,EAAM5B,QAAQ+B,EAAU9D,IAAa0B,OAAM,QAEnE,CAOA,OANAsC,EAAW9F,EAAoB,CAC3BqB,OAAQ4E,EACRrE,gBACA5C,SACA8C,eAEGgE,GAAU,EAErB,MAAO,IAAMA,IAAWtC,OAAMtD,UAI1B,MAHI0F,GACA3G,QAAQmE,QAAQqC,EAAMhC,WAAWmC,IAAWpC,OAAM,SAEhD0B,CAAG,GAEjB,CCtCoDkB,CAAyB,IACtE9D,I,oDCFA,MCKM+D,EAAW,WAAkB,IAAAC,EAAAC,EAAAC,EAAA,IAElCC,EAFiBnE,EAAOM,UAAAC,OAAA,QAAAb,IAAAY,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClB,QAAd0D,EAAAhE,EAAQ7B,cAAM,IAAA6F,GAAdA,EAAgB5F,MAAM,gDAEtB,MAAMgG,EAAOpE,EAAQqE,mBACrB,IAAID,EAIA,MAAM,IAAIrE,EAAAA,GAAyB,6CAA8C,CAAE5B,OAAQ6B,EAAQ7B,SAHnGgG,EAAOC,EAKX,MAAME,EAAM,IAAIC,IAAIJ,GCTAK,EAACF,EAAKnG,KAC1B,GAAqB,WAAjBmG,EAAIG,UAJe,kBAOnBH,EAAII,UANoB,mBAOxBJ,EAAII,UANoB,mBAOxBJ,EAAII,SAFR,CAKA,GAAIJ,EAAII,SAASC,SAAS,MACtB,GAAqB,UAAjBL,EAAII,UAAyC,8CAAjBJ,EAAII,SAChC,WAGH,CACD,GAAqB,cAAjBJ,EAAII,SACJ,OAEJ,MAAME,EAAeN,EAAII,SAASG,MAAM,KAClCC,EAAWC,IACb,MAAMC,EAAMC,SAASF,EAAW,IAChC,OAAO,GAAKC,GAAOA,GAAO,GAAG,EAEjC,GAAwB,QAApBJ,EAAa,IACbE,EAAQF,EAAa,KACrBE,EAAQF,EAAa,KACrBE,EAAQF,EAAa,KACG,IAAxBA,EAAarE,OACb,MAER,CACA,MAAM,IAAIR,EAAAA,GAAyB,sNAGmB,CAAE5B,UA1BxD,CA0BiE,EDxBjEqG,CAASF,EAAKtE,EAAQ7B,QACtB,MAAM+G,EAAiB,IAAIC,EAAAA,GAC3B,ODlByBC,ECkBLxH,UAChB,MAAMyH,EEfP,SAA0Bf,GAC7B,OAAO,IAAIgB,EAAAA,GAAY,CACnBb,SAAUH,EAAIG,SACdC,SAAUJ,EAAII,SACda,KAAMC,OAAOlB,EAAIiB,MACjBE,KAAMnB,EAAIoB,SACVC,MAAOC,MAAMC,KAAKvB,EAAIwB,aAAaC,WAAWhJ,QAAO,CAACiJ,EAAGzI,KAAa,IAAV0I,EAAGC,GAAE3I,EAE7D,OADAyI,EAAIC,GAAKC,EACFF,CAAG,GACX,CAAC,GACJG,SAAU7B,EAAI8B,MAEtB,CFGwBC,CAAiB/B,GAKjC,OAJItE,EAAQsG,qBACRjB,EAAQkB,QAAQC,cAAgBxG,EAAQsG,oBEJ7C1I,eAA8B6I,EAAUtI,GAC3C,MAAMuI,GAASC,EAAAA,EAAAA,IAAeF,EAASG,MACjCC,QAAYH,EAAOI,oBACzB,GAA4B,MAAxBL,EAASM,WAAoB,CAC7B,MAAMC,EAASC,KAAKC,MAAML,GAC1B,GAAkC,kBAAvBG,EAAOxI,aACoB,kBAA3BwI,EAAOG,iBACU,kBAAjBH,EAAOI,OACe,kBAAtBJ,EAAOtI,WACd,MAAM,IAAIqB,EAAAA,GAAyB,iLACiE,CAAE5B,WAE1G,MAAO,CACHwB,YAAaqH,EAAOxI,YACpBoB,gBAAiBoH,EAAOG,gBACxBtH,aAAcmH,EAAOI,MACrBtH,YAAYuH,EAAAA,EAAAA,IAAqBL,EAAOtI,YAEhD,CACA,GAAI+H,EAASM,YAAc,KAAON,EAASM,WAAa,IAAK,CACzD,IAAIO,EAAa,CAAC,EAClB,IACIA,EAAaL,KAAKC,MAAML,EAC5B,CACA,MAAOU,GAAK,CACZ,MAAM1K,OAAOmC,OAAO,IAAIe,EAAAA,GAAyB,iCAADwD,OAAkCkD,EAASM,YAAc,CAAE5I,WAAW,CAClHqJ,KAAMF,EAAWE,KACjBC,QAASH,EAAWG,SAE5B,CACA,MAAM,IAAI1H,EAAAA,GAAyB,iCAADwD,OAAkCkD,EAASM,YAAc,CAAE5I,UACjG,CFxBeuJ,QADcxC,EAAeyC,OAAOtC,IACdoB,SAAS,EDxBRmB,ECyBb,QAApB3D,EAAEjE,EAAQ4H,kBAAU,IAAA3D,EAAAA,EAAI,EDzBqB4D,ECyBH,QAAjB3D,EAAElE,EAAQ8H,eAAO,IAAA5D,EAAAA,EAAI,IDxBxCtG,UACH,IAAK,IAAImK,EAAI,EAAGA,EAAIH,IAAcG,EAC9B,IACI,aAAa3C,GACjB,CACA,MAAOmC,SACG,IAAI5K,SAASmE,GAAYkH,WAAWlH,EAAS+G,IACvD,CAEJ,aAAazC,GAAS,EAVF6C,IAAC7C,EAASwC,EAAYC,CC0BlD,EGzBaK,EAA4BlI,IACrC,IAAImI,EACJ,OAAOvK,UAAY,IAAAoG,EAAAoE,EACD,QAAdpE,EAAAhE,EAAQ7B,cAAM,IAAA6F,GAAdA,EAAgB5F,MAAM,kEACtB,MAAMiK,EAAS,IAAKrI,EAAQqI,OAAQC,gBAA+C,QAAhCF,EAAEpI,EAAQqI,OAAOC,uBAAe,IAAAF,EAAAA,EAAI,cAAgBG,KAAKC,OAC5G,GAAU,OAANH,QAAM,IAANA,GAAAA,EAAQI,aAAc,CACtB,IAAKzI,EAAQ0I,gBACT,MAAM,IAAI3I,EAAAA,GAAyB,oGAA0G,CACzI4I,aAAa,EACbxK,OAAQ6B,EAAQ7B,SAGxBkK,EAAOO,gBAAkB5I,EAAQ0I,gBAAsB,OAANL,QAAM,IAANA,OAAM,EAANA,EAAQI,aAC7D,CACA,MAAM,kBAAEI,EAAiB,UAAEC,SAAoB,kEAG/C,GAFKX,IACDA,EAAY,IAAIW,EAAU,IAAK9I,EAAQf,aAAc8J,YAAa/I,EAAQgJ,qBAC1EhJ,EAAQiJ,cACR,IAAK,MAAMC,KAAUlJ,EAAQiJ,cACzBd,EAAUgB,gBAAgBC,IAAIF,GAGtC,MAAM,YAAE3K,SAAsB4J,EAAU/I,KAAK,IAAIyJ,EAAkBR,IACnE,IAAK9J,IAAgBA,EAAYC,cAAgBD,EAAY4I,gBACzD,MAAM,IAAIpH,EAAAA,GAAyB,uDAADwD,OAAwD8E,EAAOgB,SAAW,CACxGlL,OAAQ6B,EAAQ7B,SAGxB,MAAO,CACHwB,YAAapB,EAAYC,YACzBoB,gBAAiBrB,EAAY4I,gBAC7BtH,aAActB,EAAYM,aAC1BiB,WAAYvB,EAAYG,WACxB4K,gBAAiB/K,EAAYgL,gBAChC,CACJ,E,QCpCE,MCCMC,EAAgBC,GDDAA,IAAS7L,UAAY,IAAA8L,EACnC,QAAXA,EAAAD,EAAKtL,cAAM,IAAAuL,GAAXA,EAAatL,MAAM,4DACnB,MAAM,QAAEuL,EAAO,gBAAEC,EAAe,iBAAEC,EAAgB,WAAEC,EAAU,WAAEC,EAAU,OAAEC,EAAM,gBAAEC,GAAoBR,EACxG,IAAI,2BAAES,GAA+BT,EACrC,IAAKS,EAA4B,CAC7B,MAAM,qCAAEC,SAA+C,mEACvDD,EAA6BC,EAAqC,IAC3DV,EAAKxK,aACRmL,yBAA0BX,EAAKtL,OAC/BgB,mBAAoBsK,EAAKtK,oBAC1BsK,EAAKR,cACZ,CACA,OAAOiB,EAA2B,CAC9Bb,QAASM,EACTrB,gBAAgC,OAAfsB,QAAe,IAAfA,EAAAA,EAAe,sBAAArG,OAA0BgF,KAAKC,OAC/D6B,iBAAkBR,EAClBS,WAAYR,EACZS,WAAYR,EACZS,OAAQR,EACRS,gBAAiBR,GACnB,ECnBgCS,CAAc,IAC7CjB,G","sources":["../node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/resolveLogins.js","../node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentity.js","../node_modules/@aws-sdk/credential-providers/dist-es/fromCognitoIdentity.js","../node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/IndexedDbStorage.js","../node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/localStorage.js","../node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/InMemoryStorage.js","../node_modules/@aws-sdk/credential-provider-cognito-identity/dist-es/fromCognitoIdentityPool.js","../node_modules/@aws-sdk/credential-providers/dist-es/fromCognitoIdentityPool.js","../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js","../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.browser.js","../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js","../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js","../node_modules/@aws-sdk/credential-providers/dist-es/fromTemporaryCredentials.js","../node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","../node_modules/@aws-sdk/credential-providers/dist-es/fromWebToken.js"],"sourcesContent":["export function resolveLogins(logins) {\n    return Promise.all(Object.keys(logins).reduce((arr, name) => {\n        const tokenOrProvider = logins[name];\n        if (typeof tokenOrProvider === \"string\") {\n            arr.push([name, tokenOrProvider]);\n        }\n        else {\n            arr.push(tokenOrProvider().then((token) => [name, token]));\n        }\n        return arr;\n    }, [])).then((resolvedPairs) => resolvedPairs.reduce((logins, [key, value]) => {\n        logins[key] = value;\n        return logins;\n    }, {}));\n}\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentity(parameters) {\n    return async () => {\n        parameters.logger?.debug(\"@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity\");\n        const { GetCredentialsForIdentityCommand, CognitoIdentityClient } = await import(\"./loadCognitoIdentity\");\n        const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(parameters.logger), Expiration, SecretKey = throwOnMissingSecretKey(parameters.logger), SessionToken, } = throwOnMissingCredentials(parameters.logger), } = await (parameters.client ??\n            new CognitoIdentityClient(Object.assign({}, parameters.clientConfig ?? {}, {\n                region: parameters.clientConfig?.region ?? parameters.parentClientConfig?.region,\n            }))).send(new GetCredentialsForIdentityCommand({\n            CustomRoleArn: parameters.customRoleArn,\n            IdentityId: parameters.identityId,\n            Logins: parameters.logins ? await resolveLogins(parameters.logins) : undefined,\n        }));\n        return {\n            identityId: parameters.identityId,\n            accessKeyId: AccessKeyId,\n            secretAccessKey: SecretKey,\n            sessionToken: SessionToken,\n            expiration: Expiration,\n        };\n    };\n}\nfunction throwOnMissingAccessKeyId(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no access key ID\", { logger });\n}\nfunction throwOnMissingCredentials(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no credentials\", { logger });\n}\nfunction throwOnMissingSecretKey(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no secret key\", { logger });\n}\n","import { fromCognitoIdentity as _fromCognitoIdentity, } from \"@aws-sdk/credential-provider-cognito-identity\";\nexport const fromCognitoIdentity = (options) => _fromCognitoIdentity({\n    ...options,\n});\n","const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n    constructor(dbName = \"aws:cognito-identity-ids\") {\n        this.dbName = dbName;\n    }\n    getItem(key) {\n        return this.withObjectStore(\"readonly\", (store) => {\n            const req = store.get(key);\n            return new Promise((resolve) => {\n                req.onerror = () => resolve(null);\n                req.onsuccess = () => resolve(req.result ? req.result.value : null);\n            });\n        }).catch(() => null);\n    }\n    removeItem(key) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.delete(key);\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    setItem(id, value) {\n        return this.withObjectStore(\"readwrite\", (store) => {\n            const req = store.put({ id, value });\n            return new Promise((resolve, reject) => {\n                req.onerror = () => reject(req.error);\n                req.onsuccess = () => resolve();\n            });\n        });\n    }\n    getDb() {\n        const openDbRequest = self.indexedDB.open(this.dbName, 1);\n        return new Promise((resolve, reject) => {\n            openDbRequest.onsuccess = () => {\n                resolve(openDbRequest.result);\n            };\n            openDbRequest.onerror = () => {\n                reject(openDbRequest.error);\n            };\n            openDbRequest.onblocked = () => {\n                reject(new Error(\"Unable to access DB\"));\n            };\n            openDbRequest.onupgradeneeded = () => {\n                const db = openDbRequest.result;\n                db.onerror = () => {\n                    reject(new Error(\"Failed to create object store\"));\n                };\n                db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\n            };\n        });\n    }\n    withObjectStore(mode, action) {\n        return this.getDb().then((db) => {\n            const tx = db.transaction(STORE_NAME, mode);\n            tx.oncomplete = () => db.close();\n            return new Promise((resolve, reject) => {\n                tx.onerror = () => reject(tx.error);\n                resolve(action(tx.objectStore(STORE_NAME)));\n            }).catch((err) => {\n                db.close();\n                throw err;\n            });\n        });\n    }\n}\n","import { IndexedDbStorage } from \"./IndexedDbStorage\";\nimport { InMemoryStorage } from \"./InMemoryStorage\";\nconst inMemoryStorage = new InMemoryStorage();\nexport function localStorage() {\n    if (typeof self === \"object\" && self.indexedDB) {\n        return new IndexedDbStorage();\n    }\n    if (typeof window === \"object\" && window.localStorage) {\n        return window.localStorage;\n    }\n    return inMemoryStorage;\n}\n","export class InMemoryStorage {\n    constructor(store = {}) {\n        this.store = store;\n    }\n    getItem(key) {\n        if (key in this.store) {\n            return this.store[key];\n        }\n        return null;\n    }\n    removeItem(key) {\n        delete this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n    }\n}\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool({ accountId, cache = localStorage(), client, clientConfig, customRoleArn, identityPoolId, logins, userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined, logger, parentClientConfig, }) {\n    logger?.debug(\"@aws-sdk/credential-provider-cognito-identity - fromCognitoIdentity\");\n    const cacheKey = userIdentifier\n        ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}`\n        : undefined;\n    let provider = async () => {\n        const { GetIdCommand, CognitoIdentityClient } = await import(\"./loadCognitoIdentity\");\n        const _client = client ??\n            new CognitoIdentityClient(Object.assign({}, clientConfig ?? {}, { region: clientConfig?.region ?? parentClientConfig?.region }));\n        let identityId = (cacheKey && (await cache.getItem(cacheKey)));\n        if (!identityId) {\n            const { IdentityId = throwOnMissingId(logger) } = await _client.send(new GetIdCommand({\n                AccountId: accountId,\n                IdentityPoolId: identityPoolId,\n                Logins: logins ? await resolveLogins(logins) : undefined,\n            }));\n            identityId = IdentityId;\n            if (cacheKey) {\n                Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => { });\n            }\n        }\n        provider = fromCognitoIdentity({\n            client: _client,\n            customRoleArn,\n            logins,\n            identityId,\n        });\n        return provider();\n    };\n    return () => provider().catch(async (err) => {\n        if (cacheKey) {\n            Promise.resolve(cache.removeItem(cacheKey)).catch(() => { });\n        }\n        throw err;\n    });\n}\nfunction throwOnMissingId(logger) {\n    throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\", { logger });\n}\n","import { fromCognitoIdentityPool as _fromCognitoIdentityPool, } from \"@aws-sdk/credential-provider-cognito-identity\";\nexport const fromCognitoIdentityPool = (options) => _fromCognitoIdentityPool({\n    ...options,\n});\n","export const retryWrapper = (toRetry, maxRetries, delayMs) => {\n    return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n            try {\n                return await toRetry();\n            }\n            catch (e) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n        }\n        return await toRetry();\n    };\n};\n","import { FetchHttpHandler } from \"@smithy/fetch-http-handler\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { checkUrl } from \"./checkUrl\";\nimport { createGetRequest, getCredentials } from \"./requestHelpers\";\nimport { retryWrapper } from \"./retry-wrapper\";\nexport const fromHttp = (options = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-http - fromHttp\");\n    let host;\n    const full = options.credentialsFullUri;\n    if (full) {\n        host = full;\n    }\n    else {\n        throw new CredentialsProviderError(\"No HTTP credential provider host provided.\", { logger: options.logger });\n    }\n    const url = new URL(host);\n    checkUrl(url, options.logger);\n    const requestHandler = new FetchHttpHandler();\n    return retryWrapper(async () => {\n        const request = createGetRequest(url);\n        if (options.authorizationToken) {\n            request.headers.Authorization = options.authorizationToken;\n        }\n        const result = await requestHandler.handle(request);\n        return getCredentials(result.response);\n    }, options.maxRetries ?? 3, options.timeout ?? 1000);\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nconst LOOPBACK_CIDR_IPv4 = \"127.0.0.0/8\";\nconst LOOPBACK_CIDR_IPv6 = \"::1/128\";\nconst ECS_CONTAINER_HOST = \"169.254.170.2\";\nconst EKS_CONTAINER_HOST_IPv4 = \"169.254.170.23\";\nconst EKS_CONTAINER_HOST_IPv6 = \"[fd00:ec2::23]\";\nexport const checkUrl = (url, logger) => {\n    if (url.protocol === \"https:\") {\n        return;\n    }\n    if (url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6) {\n        return;\n    }\n    if (url.hostname.includes(\"[\")) {\n        if (url.hostname === \"[::1]\" || url.hostname === \"[0000:0000:0000:0000:0000:0000:0000:0001]\") {\n            return;\n        }\n    }\n    else {\n        if (url.hostname === \"localhost\") {\n            return;\n        }\n        const ipComponents = url.hostname.split(\".\");\n        const inRange = (component) => {\n            const num = parseInt(component, 10);\n            return 0 <= num && num <= 255;\n        };\n        if (ipComponents[0] === \"127\" &&\n            inRange(ipComponents[1]) &&\n            inRange(ipComponents[2]) &&\n            inRange(ipComponents[3]) &&\n            ipComponents.length === 4) {\n            return;\n        }\n    }\n    throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { parseRfc3339DateTime } from \"@smithy/smithy-client\";\nimport { sdkStreamMixin } from \"@smithy/util-stream\";\nexport function createGetRequest(url) {\n    return new HttpRequest({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n            acc[k] = v;\n            return acc;\n        }, {}),\n        fragment: url.hash,\n    });\n}\nexport async function getCredentials(response, logger) {\n    const stream = sdkStreamMixin(response.body);\n    const str = await stream.transformToString();\n    if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (typeof parsed.AccessKeyId !== \"string\" ||\n            typeof parsed.SecretAccessKey !== \"string\" ||\n            typeof parsed.Token !== \"string\" ||\n            typeof parsed.Expiration !== \"string\") {\n            throw new CredentialsProviderError(\"HTTP credential provider response not of the required format, an object matching: \" +\n                \"{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }\", { logger });\n        }\n        return {\n            accessKeyId: parsed.AccessKeyId,\n            secretAccessKey: parsed.SecretAccessKey,\n            sessionToken: parsed.Token,\n            expiration: parseRfc3339DateTime(parsed.Expiration),\n        };\n    }\n    if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n            parsedBody = JSON.parse(str);\n        }\n        catch (e) { }\n        throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger }), {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n        });\n    }\n    throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger });\n}\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const fromTemporaryCredentials = (options) => {\n    let stsClient;\n    return async () => {\n        options.logger?.debug(\"@aws-sdk/credential-providers - fromTemporaryCredentials (STS)\");\n        const params = { ...options.params, RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now() };\n        if (params?.SerialNumber) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, {\n                    tryNextLink: false,\n                    logger: options.logger,\n                });\n            }\n            params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n        }\n        const { AssumeRoleCommand, STSClient } = await import(\"./loadSts\");\n        if (!stsClient)\n            stsClient = new STSClient({ ...options.clientConfig, credentials: options.masterCredentials });\n        if (options.clientPlugins) {\n            for (const plugin of options.clientPlugins) {\n                stsClient.middlewareStack.use(plugin);\n            }\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`, {\n                logger: options.logger,\n            });\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            credentialScope: Credentials.CredentialScope,\n        };\n    };\n};\n","export const fromWebToken = (init) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"@aws-sdk/client-sts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: init.parentClientConfig,\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","import { fromWebToken as _fromWebToken } from \"@aws-sdk/credential-provider-web-identity\";\nexport const fromWebToken = (init) => _fromWebToken({\n    ...init,\n});\n"],"names":["resolveLogins","logins","Promise","all","Object","keys","reduce","arr","name","tokenOrProvider","push","then","token","resolvedPairs","_ref","key","value","fromCognitoIdentity","parameters","async","_parameters$logger","_parameters$client","_parameters$clientCon","_parameters$clientCon2","_parameters$clientCon3","_parameters$parentCli","logger","debug","GetCredentialsForIdentityCommand","CognitoIdentityClient","Credentials","AccessKeyId","throwOnMissingAccessKeyId","Expiration","SecretKey","throwOnMissingSecretKey","SessionToken","throwOnMissingCredentials","client","assign","clientConfig","region","parentClientConfig","send","CustomRoleArn","customRoleArn","IdentityId","identityId","Logins","undefined","accessKeyId","secretAccessKey","sessionToken","expiration","CredentialsProviderError","options","_fromCognitoIdentity","STORE_NAME","IndexedDbStorage","constructor","dbName","arguments","length","this","getItem","withObjectStore","store","req","get","resolve","onerror","onsuccess","result","catch","removeItem","delete","reject","error","setItem","id","put","getDb","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","tx","transaction","oncomplete","close","objectStore","err","inMemoryStorage","localStorage","window","throwOnMissingId","fromCognitoIdentityPool","accountId","cache","identityPoolId","userIdentifier","cacheKey","concat","provider","_clientConfig$region","GetIdCommand","_client","AccountId","IdentityPoolId","_fromCognitoIdentityPool","fromHttp","_options$logger","_options$maxRetries","_options$timeout","host","full","credentialsFullUri","url","URL","checkUrl","protocol","hostname","includes","ipComponents","split","inRange","component","num","parseInt","requestHandler","FetchHttpHandler","toRetry","request","HttpRequest","port","Number","path","pathname","query","Array","from","searchParams","entries","acc","k","v","fragment","hash","createGetRequest","authorizationToken","headers","Authorization","response","stream","sdkStreamMixin","body","str","transformToString","statusCode","parsed","JSON","parse","SecretAccessKey","Token","parseRfc3339DateTime","parsedBody","e","Code","Message","getCredentials","handle","maxRetries","delayMs","timeout","i","setTimeout","retryWrapper","fromTemporaryCredentials","stsClient","_options$params$RoleS","params","RoleSessionName","Date","now","SerialNumber","mfaCodeProvider","tryNextLink","TokenCode","AssumeRoleCommand","STSClient","credentials","masterCredentials","clientPlugins","plugin","middlewareStack","use","RoleArn","credentialScope","CredentialScope","fromWebToken","init","_init$logger","roleArn","roleSessionName","webIdentityToken","providerId","policyArns","policy","durationSeconds","roleAssumerWithWebIdentity","getDefaultRoleAssumerWithWebIdentity","credentialProviderLogger","WebIdentityToken","ProviderId","PolicyArns","Policy","DurationSeconds","_fromWebToken"],"sourceRoot":""}