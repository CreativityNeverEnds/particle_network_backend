{"version":3,"file":"static/js/713.ef886099.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_md.ts","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha512.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@noble/curves/src/ed25519.ts","../node_modules/@noble/hashes/src/sha256.ts","../../src/error.ts","../../src/utils.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../../src/structs/coercions.ts","../node_modules/rpc-websockets/src/lib/client/websocket.browser.ts","../node_modules/rpc-websockets/src/lib/client.ts","../node_modules/rpc-websockets/src/lib/utils.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/account.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/utils/guarded-array-utils.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/message.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/src/utils/cluster.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","../node_modules/@solana/web3.js/src/index.ts","../node_modules/@solana/web3.js/node_modules/base-x/src/index.js","../node_modules/@solana/web3.js/node_modules/bs58/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/borsh/node_modules/base-x/src/index.js","../node_modules/borsh/node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/node_modules/eventemitter3/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { HashMD } from './_md.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nexport class SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nexport class SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nexport class SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean')\n    throw new Error(`${title} must be valid boolean, got \"${value}\".`);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint) {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint) {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(fn: (arg: T, ...args: O) => R) {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\nexport function FpLegendre(order: bigint) {\n  // (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n  // (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * NOTE: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject, bitLen } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>(); // This allows use make points immutable (nothing changes inside)\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const validateW = (W: number) => {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n      throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);\n  };\n  const opts = (W: number) => {\n    validateW(W);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W: number = pointWindowSizes.get(P) || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return this.wNAF(W, comp, n);\n    },\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM).\n * MSM is basically (Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param field field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  field: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)\n    throw new Error('arrays of points and scalars must have equal length');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error(`wrong scalar at index ${i}`);\n  });\n  points.forEach((p, i) => {\n    if (!(p instanceof (c as any))) throw new Error(`wrong point at index ${i}`);\n  });\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(c.ZERO); // +1 for zero array\n  const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;\n  let sum = c.ZERO;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(c.ZERO);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = c.ZERO; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport {\n  AffinePoint,\n  BasicCurve,\n  Group,\n  GroupConstructor,\n  validateBasic,\n  wNAF,\n  pippenger,\n} from './curve.js';\nimport { mod, Field } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex, memoized, abool } from './utils.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n  msm(points: ExtPointType[], scalars: bigint[]): ExtPointType;\n}\n\n/**\n * Edwards Curve interface.\n * Main methods: `getPublicKey(priv)`, `sign(msg, priv)`, `verify(sig, msg, pub)`.\n */\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n/**\n * Creates Twisted Edwards curve with EdDSA signatures.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, d, p, n, Gx, Gy, h\n * const curve = twistedEdwards({ a, d, Fp: Field(p), n, Gx, Gy, h })\n */\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      abool('phflag', phflag);\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  // 0 <= n < MASK\n  // Coordinates larger than Fp.ORDER are allowed for zip215\n  function aCoordinate(title: string, n: bigint) {\n    ut.aInRange('coordinate ' + title, n, _0n, MASK);\n  }\n\n  function assertPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Converts Extended point to default (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  const toAffineMemo = memoized((p: Point, iz?: bigint): AffinePoint<bigint> => {\n    const { ex: x, ey: y, ez: z } = p;\n    const is0 = p.is0();\n    if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n    const ax = modP(x * iz);\n    const ay = modP(y * iz);\n    const zz = modP(z * iz);\n    if (is0) return { x: _0n, y: _1n };\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  const assertValidMemo = memoized((p: Point) => {\n    const { a, d } = CURVE;\n    if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n    // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n    // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n    const { ex: X, ey: Y, ez: Z, et: T } = p;\n    const X2 = modP(X * X); // X²\n    const Y2 = modP(Y * Y); // Y²\n    const Z2 = modP(Z * Z); // Z²\n    const Z4 = modP(Z2 * Z2); // Z⁴\n    const aX2 = modP(X2 * a); // aX²\n    const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n    const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n    if (left !== right) throw new Error('bad point: equation left != right (1)');\n    // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n    const XY = modP(X * Y);\n    const ZT = modP(Z * T);\n    if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    return true;\n  });\n\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      aCoordinate('x', ex);\n      aCoordinate('y', ey);\n      aCoordinate('z', ez);\n      aCoordinate('t', et);\n      Object.freeze(this);\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      aCoordinate('x', x);\n      aCoordinate('y', y);\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      assertPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      assertPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _1n, CURVE_ORDER); // 1 <= scalar < L\n      const { p, f } = this.wNAF(n);\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      const n = scalar;\n      ut.aInRange('scalar', n, _0n, CURVE_ORDER); // 0 <= scalar < L\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      return toAffineMemo(this, iz);\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      abool('zip215', zip215);\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n\n      // RFC8032 prohibits >= p, but ZIP215 doesn't\n      // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n      // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n      const max = zip215 ? MASK : Fp.ORDER;\n      ut.aInRange('pointHex.y', y, _0n, max);\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    ut.aInRange('signature.s', s, _0n, CURVE_ORDER); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (zip215 !== undefined) abool('zip215', zip215);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { AffinePoint, Group } from './abstract/curve.js';\nimport { CurveFn, ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { createHasher, expand_message_xmd, htfBasicOpts } from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() =>\n  ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n  }) as const)();\n\n/**\n * ed25519 curve with EdDSA signatures.\n */\nexport const ed25519: CurveFn = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\nexport const ed25519ph = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n",null,null,null,null,null,null,"/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\n\"use strict\"\n\nimport { EventEmitter } from \"eventemitter3\"\n\nimport {\n    BrowserWebSocketType,\n    NodeWebSocketType,\n    IWSClientAdditionalOptions,\n} from \"./client.types.js\"\n\nclass WebSocketBrowserImpl extends EventEmitter\n{\n    socket: BrowserWebSocketType\n\n    /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n    constructor(address: string, options: {}, protocols?: string | string[])\n    {\n        super()\n\n        this.socket = new window.WebSocket(address, protocols)\n\n        this.socket.onopen = () => this.emit(\"open\")\n        this.socket.onmessage = (event) => this.emit(\"message\", event.data)\n        this.socket.onerror = (error) => this.emit(\"error\", error)\n        this.socket.onclose = (event) =>\n        {\n            this.emit(\"close\", event.code, event.reason)\n        }\n    }\n\n    /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n    send(\n        data: Parameters<BrowserWebSocketType[\"send\"]>[0],\n        optionsOrCallback: (\n      error?: Error\n    ) => void | Parameters<NodeWebSocketType[\"send\"]>[1],\n        callback?: () => void\n    )\n    {\n        const cb = callback || optionsOrCallback\n\n        try\n        {\n            this.socket.send(data)\n            cb()\n        }\n        catch (error)\n        {\n            cb(error)\n        }\n    }\n\n    /**\n   * Closes an underlying socket\n   * @method\n   * @param {Number} code - status code explaining why the connection is being closed\n   * @param {String} reason - a description why the connection is closing\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    close(code?: number, reason?: string)\n    {\n        this.socket.close(code, reason)\n    }\n\n    addEventListener<K extends keyof WebSocketEventMap>(\n        type: K,\n        listener: (ev: WebSocketEventMap[K]) => any,\n        options?: boolean | AddEventListenerOptions\n    ): void\n    {\n        this.socket.addEventListener(type, listener, options)\n    }\n}\n\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nexport function WebSocket(\n    address: string,\n    options: IWSClientAdditionalOptions\n)\n{\n    return new WebSocketBrowserImpl(address, options)\n}\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\n\"use strict\"\n\nimport NodeWebSocket from \"ws\"\nimport { EventEmitter } from \"eventemitter3\"\nimport {\n    ICommonWebSocket,\n    IWSClientAdditionalOptions,\n    NodeWebSocketType,\n    ICommonWebSocketFactory,\n} from \"./client/client.types.js\"\n\nimport { DataPack, DefaultDataPack } from \"./utils.js\"\n\ninterface IQueueElement {\n  promise: [\n    Parameters<ConstructorParameters<typeof Promise>[0]>[0],\n    Parameters<ConstructorParameters<typeof Promise>[0]>[1]\n  ];\n  timeout?: ReturnType<typeof setTimeout>;\n}\n\nexport interface IQueue {\n  [x: number]: IQueueElement;\n}\n\nexport interface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\nexport class CommonClient extends EventEmitter\n{\n    private address: string\n    private rpc_id: number\n    private queue: IQueue\n    private options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    private autoconnect: boolean\n    private ready: boolean\n    private reconnect: boolean\n    private reconnect_timer_id: NodeJS.Timeout\n    private reconnect_interval: number\n    private max_reconnects: number\n    private rest_options: IWSClientAdditionalOptions &\n    NodeWebSocket.ClientOptions\n    private current_reconnects: number\n    private generate_request_id: (\n    method: string,\n    params: object | Array<any>\n  ) => number\n    private socket: ICommonWebSocket\n    private webSocketFactory: ICommonWebSocketFactory\n    private dataPack: DataPack<object, string>\n\n    /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @param {DataPack} dataPack - data pack contains encoder and decoder\n   * @return {CommonClient}\n   */\n    constructor(\n        webSocketFactory: ICommonWebSocketFactory,\n        address = \"ws://localhost:8080\",\n        {\n            autoconnect = true,\n            reconnect = true,\n            reconnect_interval = 1000,\n            max_reconnects = 5,\n            ...rest_options\n        } = {},\n        generate_request_id?: (\n      method: string,\n      params: object | Array<any>\n    ) => number,\n        dataPack?: DataPack<object, string>\n    )\n    {\n        super()\n\n        this.webSocketFactory = webSocketFactory\n\n        this.queue = {}\n        this.rpc_id = 0\n\n        this.address = address\n        this.autoconnect = autoconnect\n        this.ready = false\n        this.reconnect = reconnect\n        this.reconnect_timer_id = undefined\n        this.reconnect_interval = reconnect_interval\n        this.max_reconnects = max_reconnects\n        this.rest_options = rest_options\n        this.current_reconnects = 0\n        this.generate_request_id = generate_request_id || (() => ++this.rpc_id)\n\n        if (!dataPack) this.dataPack = new DefaultDataPack()\n        else this.dataPack = dataPack\n\n        if (this.autoconnect)\n            this._connect(this.address, {\n                autoconnect: this.autoconnect,\n                reconnect: this.reconnect,\n                reconnect_interval: this.reconnect_interval,\n                max_reconnects: this.max_reconnects,\n                ...this.rest_options,\n            })\n    }\n\n    /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n    connect()\n    {\n        if (this.socket) return\n\n        this._connect(this.address, {\n            autoconnect: this.autoconnect,\n            reconnect: this.reconnect,\n            reconnect_interval: this.reconnect_interval,\n            max_reconnects: this.max_reconnects,\n            ...this.rest_options,\n        })\n    }\n\n    /**\n   * Calls a registered RPC method on server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object|Array} params - optional method parameters\n   * @param {Number} timeout - RPC reply timeout value\n   * @param {Object} ws_opts - options passed to ws\n   * @return {Promise}\n   */\n    call(\n        method: string,\n        params?: IWSRequestParams,\n        timeout?: number,\n        ws_opts?: Parameters<NodeWebSocketType[\"send\"]>[1]\n    )\n    {\n        if (!ws_opts && \"object\" === typeof timeout)\n        {\n            ws_opts = timeout\n            timeout = null\n        }\n\n        return new Promise((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const rpc_id = this.generate_request_id(method, params)\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params: params || undefined,\n                id: rpc_id,\n            }\n\n            this.socket.send(this.dataPack.encode(message), ws_opts, (error) =>\n            {\n                if (error) return reject(error)\n\n                this.queue[rpc_id] = { promise: [resolve, reject] }\n\n                if (timeout)\n                {\n                    this.queue[rpc_id].timeout = setTimeout(() =>\n                    {\n                        delete this.queue[rpc_id]\n                        reject(new Error(\"reply timeout\"))\n                    }, timeout)\n                }\n            })\n        })\n    }\n\n    /**\n   * Logins with the other side of the connection.\n   * @method\n   * @param {Object} params - Login credentials object\n   * @return {Promise}\n   */\n    async login(params: IWSRequestParams)\n    {\n        const resp = await this.call(\"rpc.login\", params)\n\n        if (!resp) throw new Error(\"authentication failed\")\n\n        return resp\n    }\n\n    /**\n   * Fetches a list of client's methods registered on server.\n   * @method\n   * @return {Array}\n   */\n    async listMethods()\n    {\n        return await this.call(\"__listMethods\")\n    }\n\n    /**\n   * Sends a JSON-RPC 2.0 notification to server.\n   * @method\n   * @param {String} method - RPC method name\n   * @param {Object} params - optional method parameters\n   * @return {Promise}\n   */\n    notify(method: string, params?: IWSRequestParams)\n    {\n        return new Promise<void>((resolve, reject) =>\n        {\n            if (!this.ready) return reject(new Error(\"socket not ready\"))\n\n            const message = {\n                jsonrpc: \"2.0\",\n                method: method,\n                params,\n            }\n\n            this.socket.send(this.dataPack.encode(message), (error) =>\n            {\n                if (error) return reject(error)\n\n                resolve()\n            })\n        })\n    }\n\n    /**\n   * Subscribes for a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async subscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.on\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\n                \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n            )\n\n        return result\n    }\n\n    /**\n   * Unsubscribes from a defined event.\n   * @method\n   * @param {String|Array} event - event name\n   * @return {Undefined}\n   * @throws {Error}\n   */\n    async unsubscribe(event: string | Array<string>)\n    {\n        if (typeof event === \"string\") event = [event]\n\n        const result = await this.call(\"rpc.off\", event)\n\n        if (typeof event === \"string\" && result[event] !== \"ok\")\n            throw new Error(\"Failed unsubscribing from an event with: \" + result)\n\n        return result\n    }\n\n    /**\n   * Closes a WebSocket connection gracefully.\n   * @method\n   * @param {Number} code - socket close code\n   * @param {String} data - optional data to be sent before closing\n   * @return {Undefined}\n   */\n    close(code?: number, data?: string)\n    {\n        this.socket.close(code || 1000, data)\n    }\n\n    /**\n   * Enable / disable automatic reconnection.\n   * @method\n   * @param {Boolean} reconnect - enable / disable reconnection\n   * @return {Undefined}\n   */\n    setAutoReconnect(reconnect: boolean)\n    {\n        this.reconnect = reconnect\n    }\n\n    /**\n   * Set the interval between reconnection attempts.\n   * @method\n   * @param {Number} interval - reconnection interval in milliseconds\n   * @return {Undefined}\n   */\n    setReconnectInterval(interval: number)\n    {\n        this.reconnect_interval = interval\n    }\n\n    /**\n   * Set the maximum number of reconnection attempts.\n   * @method\n   * @param {Number} max_reconnects - maximum reconnection attempts\n   * @return {Undefined}\n   */\n    setMaxReconnects(max_reconnects: number)\n    {\n        this.max_reconnects = max_reconnects\n    }\n\n    /**\n   * Connection/Message handler.\n   * @method\n   * @private\n   * @param {String} address - WebSocket API address\n   * @param {Object} options - ws options object\n   * @return {Undefined}\n   */\n    private _connect(\n        address: string,\n        options: IWSClientAdditionalOptions & NodeWebSocket.ClientOptions\n    )\n    {\n        clearTimeout(this.reconnect_timer_id)\n        this.socket = this.webSocketFactory(address, options)\n\n        this.socket.addEventListener(\"open\", () =>\n        {\n            this.ready = true\n            this.emit(\"open\")\n            this.current_reconnects = 0\n        })\n\n        this.socket.addEventListener(\"message\", ({ data: message }) =>\n        {\n            if (message instanceof ArrayBuffer)\n                message = Buffer.from(message).toString()\n\n            try\n            {\n                message = this.dataPack.decode(message)\n            }\n            catch (error)\n            {\n                return\n            }\n\n            // check if any listeners are attached and forward event\n            if (message.notification && this.listeners(message.notification).length)\n            {\n                if (!Object.keys(message.params).length)\n                    return this.emit(message.notification)\n\n                const args = [message.notification]\n\n                if (message.params.constructor === Object) args.push(message.params)\n                // using for-loop instead of unshift/spread because performance is better\n                else\n                    for (let i = 0; i < message.params.length; i++)\n                        args.push(message.params[i])\n\n                // run as microtask so that pending queue messages are resolved first\n                // eslint-disable-next-line prefer-spread\n                return Promise.resolve().then(() =>\n                {\n                    // eslint-disable-next-line prefer-spread\n                    this.emit.apply(this, args)\n                })\n            }\n\n            if (!this.queue[message.id])\n            {\n                // general JSON RPC 2.0 events\n                if (message.method)\n                {\n                    // run as microtask so that pending queue messages are resolved first\n                    return Promise.resolve().then(() =>\n                    {\n                        this.emit(message.method, message?.params)\n                    })\n                }\n\n                return\n            }\n\n            // reject early since server's response is invalid\n            if (\"error\" in message === \"result\" in message)\n                this.queue[message.id].promise[1](\n                    new Error(\n                        \"Server response malformed. Response must include either \\\"result\\\"\" +\n              \" or \\\"error\\\", but not both.\"\n                    )\n                )\n\n            if (this.queue[message.id].timeout)\n                clearTimeout(this.queue[message.id].timeout)\n\n            if (message.error) this.queue[message.id].promise[1](message.error)\n            else this.queue[message.id].promise[0](message.result)\n\n            delete this.queue[message.id]\n        })\n\n        this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error))\n\n        this.socket.addEventListener(\"close\", ({ code, reason }) =>\n        {\n            if (this.ready)\n            // Delay close event until internal state is updated\n                setTimeout(() => this.emit(\"close\", code, reason), 0)\n\n            this.ready = false\n            this.socket = undefined\n\n            if (code === 1000) return\n\n            this.current_reconnects++\n\n            if (\n                this.reconnect &&\n        (this.max_reconnects > this.current_reconnects ||\n          this.max_reconnects === 0)\n            )\n                this.reconnect_timer_id = setTimeout(\n                    () => this._connect(address, options),\n                    this.reconnect_interval\n                )\n        })\n    }\n}\n","\"use strict\"\n\nexport interface DataPack<\n  T,\n  R extends string | ArrayBufferLike | Blob | ArrayBufferView\n> {\n  encode(value: T): R;\n  decode(value: R): T;\n}\n\nexport class DefaultDataPack implements DataPack<Object, string>\n{\n    encode(value: Object): string\n    {\n        return JSON.stringify(value)\n    }\n\n    decode(value: string): Object\n    {\n        return JSON.parse(value)\n    }\n}\n","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n  isLE,\n  byteSwap32,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    if (!isLE) byteSwap32(this.state32);\n    keccakP(this.state32, this.rounds);\n    if (!isLE) byteSwap32(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport {\n  AffinePoint,\n  BasicCurve,\n  Group,\n  GroupConstructor,\n  validateBasic,\n  wNAF,\n  pippenger,\n} from './curve.js';\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes, memoized, abool } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      return `${ut.numberToHexUnpadded(tag)}${lenLen}${len}${data}`;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint) {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected assertion');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('Invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('Invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const seq = `${tlv.encode(0x02, int.encode(sig.r))}${tlv.encode(0x02, int.encode(sig.s))}`;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = mod.Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      ut.aInRange('scalar', sc, _0n, CURVE.n);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (sc === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, sc);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange(`num < 2^${CURVE.nBitLength}`, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    validateSigVerOpts(opts);\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { CHash } from './abstract/utils.js';\nimport { CurveType, weierstrass } from './abstract/weierstrass.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport {\n  inRange,\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  numberToBytesBE,\n} from './abstract/utils.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n */\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Schnorr signatures over secp256k1.\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","number","n","isSafeInteger","concat","bytes","a","_len","lengths","_key","includes","hash","h","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","createView","arr","DataView","byteLength","rotr","isLE","Uint32Array","byteSwap","byteSwap32","toBytes","data","str","TextEncoder","utf8ToBytes","abytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","Maj","c","HashMD","padOffset","super","pos","view","len","take","set","subarray","process","dataView","roundClean","digestInto","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","l","setUint32","oview","outLen","state","get","res","destroy","to","U32_MASK64","fromBig","lst","le","Ah","Al","rotlSH","s","rotlSL","rotlBH","rotlBL","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","SHA512_Kh","SHA512_Kl","u64","map","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","_0n","_1n","_2n","isBytes","item","abool","title","hexes","_","padStart","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","expectedLength","concatBytes","pad","isPosBig","inRange","max","aInRange","bitLen","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","k","reset","reseed","seed","gen","sl","genUntil","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","entries","memoized","fn","WeakMap","arg","_len2","args","_key2","computed","_3n","_4n","_5n","_8n","mod","result","power","modulo","pow2","x","invert","y","u","q","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","isNegativeLE","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","Field","ORDER","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","nums","lastMultiplied","inverted","reduceRight","FpInvertBatch","cmov","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","pointPrecomputes","pointWindowSizes","wNAF","constTimeNegate","condition","negate","validateW","W","opts","windows","windowSize","unsafeLadder","elm","double","precomputeWindow","points","base","window","precomputes","BASE","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","wNAFCached","transform","comp","setWindowSize","delete","pippenger","scalars","forEach","buckets","lastBits","j","scalar","resI","sumI","validateBasic","curve","validateField","Gx","Gy","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","ut","adjustScalarBytes","domain","uvRatio","mapToCurve","validateOpts","CURVE_ORDER","prehash","cHash","cofactor","modP","Fn","ctx","phflag","aCoordinate","assertPoint","other","Point","toAffineMemo","iz","ex","ey","ez","z","ax","ay","zz","assertValidMemo","X","Y","et","T","X2","Y2","Z2","Z4","aX2","toAffine","fromAffine","normalizeZ","toInv","msm","_setWindowSize","wnaf","assertValidity","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","multiply","multiplyUnsafe","I","isSmallOrder","isTorsionFree","clearCofactor","fromHex","normed","lastByte","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","modN","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","msgs","verifyOpts","utils","randomPrivateKey","precompute","getPublicKey","sign","options","R","verify","sig","publicKey","SB","error","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","ed25519_pow_2_252_3","_10n","_20n","_40n","_80n","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","ed25519Defaults","ed25519","SHA256_K","SHA256_IV","SHA256_W","SHA256","W15","W2","s0","s1","Chi","sha256","StructError","failure","failures","cached","message","explanation","rest","path","join","cause","_cached","isObject","isNonArrayObject","print","JSON","stringify","toFailure","struct","branch","refinement","toFailures","Symbol","iterator","run","coerce","coercer","status","validator","ts","t","Map","Set","refiner","Struct","props","schema","assert","is","validate","tuples","tuple","input","done","next","shiftIterator","define","Element","Class","literal","constant","description","never","nullable","isNaN","optional","record","Key","Value","Structs","Never","keys","coerced","first","unknown","WebSocketBrowserImpl","EventEmitter","address","protocols","_defineProperty","socket","WebSocket","onopen","emit","onmessage","event","onerror","onclose","code","reason","send","optionsOrCallback","callback","cb","close","addEventListener","listener","parse","CommonClient","webSocketFactory","autoconnect","reconnect","reconnect_interval","max_reconnects","rest_options","generate_request_id","dataPack","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","DefaultDataPack","_connect","connect","method","params","timeout","ws_opts","Promise","resolve","reject","jsonrpc","id","promise","setTimeout","login","resp","listMethods","notify","subscribe","unsubscribe","setAutoReconnect","setReconnectInterval","interval","setMaxReconnects","clearTimeout","_ref","ArrayBuffer","notification","listeners","then","apply","_message","_ref2","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","keccak","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","finish","writeInto","bufferOut","xofInto","xof","keccak_256","HMAC","assertHash","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","hmac","validateSigVerOpts","lowS","b2n","h2b","DER","Err","_tlv","dataLen","lenLen","lengthBytes","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","hexFromSig","seq","weierstrassPoints","allowedPrivateKeyLengths","wrapPrivateKey","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","_c","_isCompressed","tail","weierstrassEquation","x2","x3","normPrivateKeyToScalar","N","assertPrjPoint","px","py","pz","left","right","privateKey","hasEvenY","U1","U2","b3","t0","t1","t3","t4","t5","sc","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","multiplyAndAddUnsafe","isCompressed","_bits","ProjectivePoint","isWithinCurveOrder","weierstrass","bits2int","bits2int_modN","compressedLen","uncompressedLen","invN","cat","sqrtError","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","isValidPrivateKey","fieldLen","minLen","reduced","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getSharedSecret","privateA","publicB","drbg","signature","_Point$BASE$multiplyA","sg","_sig","derError","getHash","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","generatePrivateKey","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","isBuffer","properties","serialize","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","unique","eq","toBase58","toJSON","toArrayLike","zeroPad","alloc","toStringTag","createWithSeed","fromPublicKey","programId","publicKeyBytes","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","_PublicKey","default","kind","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","readonlySigners","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","_args$","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","addressTableLookupsCount","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref10","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","indexOf","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","_len3","_key3","seen","_len4","_key4","uniqueSigners","signer","_partialSign","partialSign","_len5","_key5","_len6","_key6","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","TransactionMessage","decompile","numWritableSignedAccounts","numWritableUnsignedAccounts","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","_ref13","action","transactionMessage","logs","maybeLogsOutput","guideText","transactionLogs","transactionError","cachedLogs","getLogs","getTransaction","tx","logMessages","catch","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","_ref14","customMessage","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SystemInstruction","decodeInstructionType","checkProgramId","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","authorized","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","UpgradeNonceAccount","createAccount","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","MS_PER_SLOT","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","fetchImpl","fetch","RpcWebSocketClient","url","rpc","underlyingSocket","_this$underlyingSocke","readyState","_this$underlyingSocke2","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","_filter$memcmp$encodi","memcmp","encoding","createRpcResult","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_requestPromises$requ","_buildArgs","requestHash","fastStableStringify$1","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","unsafeRes","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","_config$abortSignal","aborted","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","getTransactionConfirmationPromise","_ref15","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","_ref16","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_ref17","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_ref18","timeoutId","timeoutMs","TIMED_OUT","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","_config$lockedWritabl","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","_ref19","getParsedBlock","getBlockProduction","extra","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","_ref20","_ref21","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_ref22","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","clientSubscriptionId","_this$_subscriptionSt","log","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_Lockup","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","lockup","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","voteInit","InitializeAccount","voteAuthorizationType","voteAuthorizeWithSeedArgs","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","iconUrl","keybaseUsername","ValidatorInfo","fromConfigData","configKeys","rawInfo","assert$1","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","_ref23","parsePriorVoters","_ref24","epochOfLastAuthorizedSwitch","targetEpoch","_ref25","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL","_Buffer","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","basex","reversed","width","__createBinding","enumerable","__setModuleDefault","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","fieldValue","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","isError","isNotError","Events","EE","once","addListener","emitter","evt","_events","_eventsCount","clearEvent","__proto__","eventNames","events","names","getOwnPropertySymbols","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}