{"version":3,"file":"static/js/2427.3af0e432.chunk.js","mappings":"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","sources":["../node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js","../node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js","../node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js"],"sourcesContent":["import { getEndpointPlugin } from \"@smithy/middleware-endpoint\";\nimport { getSerdePlugin } from \"@smithy/middleware-serde\";\nimport { Command as $Command } from \"@smithy/smithy-client\";\nimport { commonParams } from \"../endpoint/EndpointParameters\";\nimport { AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_AssumeRoleWithWebIdentityCommand, se_AssumeRoleWithWebIdentityCommand } from \"../protocols/Aws_query\";\nexport { $Command };\nexport class AssumeRoleWithWebIdentityCommand extends $Command\n    .classBuilder()\n    .ep(commonParams)\n    .m(function (Command, cs, config, o) {\n    return [\n        getSerdePlugin(config, this.serialize, this.deserialize),\n        getEndpointPlugin(config, Command.getEndpointParameterInstructions()),\n    ];\n})\n    .s(\"AWSSecurityTokenServiceV20110615\", \"AssumeRoleWithWebIdentity\", {})\n    .n(\"STSClient\", \"AssumeRoleWithWebIdentityCommand\")\n    .f(AssumeRoleWithWebIdentityRequestFilterSensitiveLog, AssumeRoleWithWebIdentityResponseFilterSensitiveLog)\n    .ser(se_AssumeRoleWithWebIdentityCommand)\n    .de(de_AssumeRoleWithWebIdentityCommand)\n    .build() {\n}\n","import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst getAccountIdFromAssumedRoleUser = (assumedRoleUser) => {\n    if (typeof assumedRoleUser?.Arn === \"string\") {\n        const arnComponents = assumedRoleUser.Arn.split(\":\");\n        if (arnComponents.length > 4 && arnComponents[4] !== \"\") {\n            return arnComponents[4];\n        }\n    }\n    return undefined;\n};\nconst resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {\n    const region = typeof _region === \"function\" ? await _region() : _region;\n    const parentRegion = typeof _parentRegion === \"function\" ? await _parentRegion() : _parentRegion;\n    credentialProviderLogger?.debug?.(\"@aws-sdk/client-sts::resolveRegion\", \"accepting first of:\", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);\n    return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            const isCompatibleRequestHandler = !isH2(requestHandler);\n            stsClient = new stsClientCtor({\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: resolvedRegion,\n                requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,\n                logger: logger,\n            });\n        }\n        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            ...(Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope }),\n            ...(accountId && { accountId }),\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            const isCompatibleRequestHandler = !isH2(requestHandler);\n            stsClient = new stsClientCtor({\n                region: resolvedRegion,\n                requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,\n                logger: logger,\n            });\n        }\n        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            ...(Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope }),\n            ...(accountId && { accountId }),\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\nconst isH2 = (requestHandler) => {\n    return requestHandler?.metadata?.handlerProtocol === \"h2\";\n};\n","import { getDefaultRoleAssumer as StsGetDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity as StsGetDefaultRoleAssumerWithWebIdentity, } from \"./defaultStsRoleAssumers\";\nimport { STSClient } from \"./STSClient\";\nconst getCustomizableStsClientCtor = (baseCtor, customizations) => {\n    if (!customizations)\n        return baseCtor;\n    else\n        return class CustomizableSTSClient extends baseCtor {\n            constructor(config) {\n                super(config);\n                for (const customization of customizations) {\n                    this.middlewareStack.use(customization);\n                }\n            }\n        };\n};\nexport const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\n"],"names":["AssumeRoleWithWebIdentityCommand","$Command","classBuilder","ep","commonParams","m","Command","cs","config","o","getSerdePlugin","this","serialize","deserialize","getEndpointPlugin","getEndpointParameterInstructions","s","n","f","AssumeRoleWithWebIdentityRequestFilterSensitiveLog","AssumeRoleWithWebIdentityResponseFilterSensitiveLog","ser","se_AssumeRoleWithWebIdentityCommand","de","de_AssumeRoleWithWebIdentityCommand","build","ASSUME_ROLE_DEFAULT_REGION","getAccountIdFromAssumedRoleUser","assumedRoleUser","Arn","arnComponents","split","length","resolveRegion","async","_region","_parentRegion","credentialProviderLogger","_credentialProviderLo","_ref","region","parentRegion","debug","call","concat","getDefaultRoleAssumerWithWebIdentity","stsOptions","stsClientCtor","stsClient","_stsOptions$parentCli4","_stsOptions$parentCli5","_stsOptions$parentCli6","logger","parentClientConfig","requestHandler","resolvedRegion","isCompatibleRequestHandler","isH2","undefined","Credentials","AssumedRoleUser","send","params","AccessKeyId","SecretAccessKey","Error","RoleArn","accountId","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration","CredentialScope","credentialScope","_requestHandler$metad","metadata","handlerProtocol","getCustomizableStsClientCtor","baseCtor","customizations","constructor","super","customization","middlewareStack","use","stsPlugins","arguments","StsGetDefaultRoleAssumerWithWebIdentity","STSClient"],"sourceRoot":""}